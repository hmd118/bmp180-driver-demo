import streamlit as st
import joblib
import os
import cv2
import numpy as np
from PIL import Image

# Module ri√™ng
from shape_recognition import run_shape_recognition
from face_recog.face_recog import run_real_time_recognition
from face_recog.face_recog import run_face_recog
from face_recog.Chuong349 import st_chapter3 as c3
from face_recog.Chuong349 import st_chapter4 as c4
from face_recog.Chuong349 import st_chapter9 as c9

# C·∫•u h√¨nh trang
st.set_page_config(page_title="D·ª± √°n Th·ªã gi√°c m√°y", layout="wide")
st.title("22146295-HoangMinhDuc - 22146291-LePhatDat")

# ƒê∆∞·ªùng d·∫´n m√¥ h√¨nh v√† scaler
model_path = "D:/TESTCODE TGM/PROJECT/pages/face_recog/face_recognition_model.pkl"
scaler_path = "D:/TESTCODE TGM/PROJECT/pages/face_recog/scaler.pkl"

# T·∫£i model
if os.path.exists(model_path) and os.path.exists(scaler_path):
    model = joblib.load(model_path)
    scaler = joblib.load(scaler_path)
    st.success("‚úÖ M√¥ h√¨nh v√† scaler ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng.")
else:
    model = None
    scaler = None
    st.error("‚ùå Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh ho·∫∑c scaler. Ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n.")

# Menu ch√≠nh
menu = st.sidebar.selectbox("üìÇ Ch·ªçn ch·ª©c nƒÉng", [
    "Trang ch·ªß",
    "Nh·∫≠n d·∫°ng khu√¥n m·∫∑t",
    "Nh·∫≠n d·∫°ng h√¨nh h·ªçc (Shape)",
    "Nh·∫≠n d·∫°ng tr√°i c√¢y (YOLOv11n)",
    "L√Ω thuy·∫øt th·ªã gi√°c m√°y (Ch∆∞∆°ng 3,4,9)",
    "M·ªü r·ªông th√™m (tu·ª≥ ch·ªçn)"
])

if menu == "Trang ch·ªß":
    st.subheader("üìå Gi·ªõi thi·ªáu")
    st.write("Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi d·ª± √°n Th·ªã gi√°c m√°y - s·ª≠ d·ª•ng Streamlit.")
    st.image("https://upload.wikimedia.org/wikipedia/commons/5/56/Computer_vision.svg", width=400)

elif menu == "Nh·∫≠n d·∫°ng khu√¥n m·∫∑t":
    st.subheader("üßë‚Äçü§ù‚Äçüßë Nh·∫≠n d·∫°ng khu√¥n m·∫∑t")

    # L·ª±a ch·ªçn gi·ªØa vi·ªác nh·∫≠n di·ªán khu√¥n m·∫∑t t·ª´ ·∫£nh t·∫£i l√™n ho·∫∑c t·ª´ camera
    choice = st.radio("Ch·ªçn ph∆∞∆°ng th·ª©c nh·∫≠n d·∫°ng khu√¥n m·∫∑t:", ["Nh·∫≠n di·ªán t·ª´ ·∫£nh t·∫£i l√™n", "Nh·∫≠n di·ªán t·ª´ camera"])

    # Nh·∫≠n di·ªán t·ª´ ·∫£nh ho·∫∑c video t·∫£i l√™n
    if choice == "Nh·∫≠n di·ªán t·ª´ ·∫£nh t·∫£i l√™n":
        uploaded_file = st.file_uploader("üì§ T·∫£i ·∫£nh ho·∫∑c video ƒë·ªÉ nh·∫≠n di·ªán khu√¥n m·∫∑t", type=["jpg", "jpeg", "png", "tif", "mp4"])
        if uploaded_file:
            file_bytes = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)

            if uploaded_file.type.startswith("image"):
                # X·ª≠ l√Ω ·∫£nh
                image = Image.open(uploaded_file)
                image = np.array(image)  # Chuy·ªÉn ·∫£nh th√†nh m·∫£ng NumPy
                image_bgr = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)  # Chuy·ªÉn ƒë·ªïi ·∫£nh t·ª´ RGB sang BGR n·∫øu c·∫ßn thi·∫øt

                if model and scaler:
                    run_face_recog(model=model, scaler=scaler, image=image_bgr)  # G·ªçi h√†m nh·∫≠n d·∫°ng khu√¥n m·∫∑t
                else:
                    st.error("‚ùå Thi·∫øu m√¥ h√¨nh ho·∫∑c scaler.")
            
            elif uploaded_file.type == "video/mp4":
                # X·ª≠ l√Ω video
                if model and scaler:
                    run_face_recog(model=model, scaler=scaler, video_bytes=file_bytes)  # G·ªçi h√†m nh·∫≠n d·∫°ng khu√¥n m·∫∑t cho video
                else:
                    st.error("‚ùå Thi·∫øu m√¥ h√¨nh ho·∫∑c scaler.")

    # Nh·∫≠n di·ªán t·ª´ camera
    elif choice == "Nh·∫≠n di·ªán t·ª´ camera":
        if model and scaler:
            run_real_time_recognition(model=model, scaler=scaler)  # G·ªçi h√†m nh·∫≠n d·∫°ng khu√¥n m·∫∑t t·ª´ camera
        else:
            st.error("‚ùå Thi·∫øu m√¥ h√¨nh ho·∫∑c scaler.")
elif menu == "Nh·∫≠n d·∫°ng h√¨nh h·ªçc (Shape)":
    st.subheader("üî∑ Nh·∫≠n d·∫°ng h√¨nh h·ªçc")
    run_shape_recognition()

elif menu == "Nh·∫≠n d·∫°ng tr√°i c√¢y (YOLOv11n)":
    st.subheader("üçé Nh·∫≠n d·∫°ng tr√°i c√¢y b·∫±ng YOLOv11n")
    st.write("üöß T√≠nh nƒÉng ƒëang ph√°t tri·ªÉn...")

elif menu == "L√Ω thuy·∫øt th·ªã gi√°c m√°y (Ch∆∞∆°ng 3,4,9)":
    st.subheader("üìò L√Ω thuy·∫øt th·ªã gi√°c m√°y")
    chapter = st.selectbox("üìö Ch·ªçn ch∆∞∆°ng", [
        "Ch∆∞∆°ng 3: X·ª≠ l√Ω ·∫£nh c∆° b·∫£n",
        "Ch∆∞∆°ng 4: Ph√°t hi·ªán t·∫ßn s·ªë & l·ªçc nhi·ªÖu",
        "Ch∆∞∆°ng 9: Nh·∫≠n d·∫°ng ƒë·ªëi t∆∞·ª£ng"
    ])

    # Ch∆∞∆°ng 3
    if chapter == "Ch∆∞∆°ng 3: X·ª≠ l√Ω ·∫£nh c∆° b·∫£n":
        st.markdown("### üìç Ch∆∞∆°ng 3: X·ª≠ l√Ω ·∫£nh c∆° b·∫£n")
        uploaded_file = st.file_uploader("üì§ T·∫£i ·∫£nh (Ch∆∞∆°ng 3)", type=["jpg","jpeg","png","tif"], key="c3")
        if uploaded_file:
            image = Image.open(uploaded_file)
            img_bgr = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
            img_gray = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2GRAY)

            option3 = st.selectbox("üîß Ph∆∞∆°ng ph√°p:", [
                "Negative (Gray)", "Negative (Color)", "Logarit",
                "Power (Gamma)", "Piecewise Linear", "Histogram",
                "Histogram Equalization", "Local Histogram",
                "Histogram Statistic", "Sharpening", "Gradient"
            ], key="opt3")

            # X·ª≠ l√Ω ·∫£nh ngay
            if option3 == "Negative (Gray)":
                result = c3.Negative(img_gray)
            elif option3 == "Negative (Color)":
                result = c3.NegativeColor(img_bgr)
            elif option3 == "Logarit":
                result = c3.Logarit(img_gray)
            elif option3 == "Power (Gamma)":
                result = c3.Power(img_gray)
            elif option3 == "Piecewise Linear":
                result = c3.PiecewiseLine(img_gray)
            elif option3 == "Histogram":
                result = c3.Histogram(img_gray)
            elif option3 == "Histogram Equalization":
                result = c3.HistEqual(img_gray)
            elif option3 == "Local Histogram":
                result = c3.LocalHist(img_gray)
            elif option3 == "Histogram Statistic":
                result = c3.HistStat(img_gray)
            elif option3 == "Sharpening":
                result = c3.Sharp(img_gray)
            elif option3 == "Gradient":
                result = c3.Gradien(img_gray)
            else:
                result = img_gray

            col1, col2 = st.columns(2)
            with col1:
                st.image(image, caption="·∫¢nh g·ªëc", use_container_width=True)
            with col2:
                st.image(result, caption="K·∫øt qu·∫£", use_container_width=True)

    # Ch∆∞∆°ng 4
    elif chapter == "Ch∆∞∆°ng 4: Ph√°t hi·ªán t·∫ßn s·ªë & l·ªçc nhi·ªÖu":
        st.markdown("### üìç Ch∆∞∆°ng 4: Ph√°t hi·ªán t·∫ßn s·ªë & l·ªçc nhi·ªÖu")
        uploaded_file_4 = st.file_uploader("üì§ T·∫£i ·∫£nh (Ch∆∞∆°ng 4)", type=["jpg","jpeg","png","tif"], key="c4")
        if uploaded_file_4:
            image4 = Image.open(uploaded_file_4).convert("L")
            img4 = np.array(image4)

            st.image(image4, caption="·∫¢nh g·ªëc (x√°m)", use_container_width=True)

            option4 = st.selectbox("üîß Ph∆∞∆°ng ph√°p Ch∆∞∆°ng 4:", [
                "Spectrum",
                "DrawNotchFilter",
                "DrawNotchPeriodFilter",
                "RemoveMoireSimple",
                "RemovePeriodNoise"
            ], key="opt4")

            if option4 == "Spectrum":
                result4 = c4.Spectrum(img4)
            elif option4 == "DrawNotchFilter":
                result4 = c4.DrawNotchFilter(img4)
            elif option4 == "DrawNotchPeriodFilter":
                result4 = c4.DrawNotchPeriodFilter(img4)
            elif option4 == "RemoveMoireSimple":
                result4 = c4.RemoveMoireSimple(img4)
            else:  # RemovePeriodNoise
                result4 = c4.RemovePeriodNoise(img4)

            col1, col2 = st.columns(2)
            with col1:
                st.image(image4, caption="·∫¢nh g·ªëc", use_container_width=True)
            with col2:
                st.image(result4, caption=f"K·∫øt qu·∫£: {option4}", use_container_width=True)

    # Ch∆∞∆°ng 9
    elif chapter == "Ch∆∞∆°ng 9: Nh·∫≠n d·∫°ng ƒë·ªëi t∆∞·ª£ng":
        st.markdown("### üìç Ch∆∞∆°ng 9: Nh·∫≠n d·∫°ng ƒë·ªëi t∆∞·ª£ng")
        uploaded_file_9 = st.file_uploader("üì§ T·∫£i ·∫£nh (Ch∆∞∆°ng 9)", type=["jpg","jpeg","png","tif"], key="c9")
        if uploaded_file_9:
            image9 = Image.open(uploaded_file_9).convert("L")
            img9 = np.array(image9)

            method9 = st.selectbox("üîß Ph∆∞∆°ng ph√°p Ch∆∞∆°ng 9:", [
                "Erosion", "Dilation", "Boundary", "Contour",
                "ConvexHull", "DefectDetect", "HoleFill",
                "ConnectedComponents", "RemoveSmallRice"
            ], key="opt9")

            if method9 == "Erosion":
                result9 = c9.Erosion(img9)
            elif method9 == "Dilation":
                result9 = c9.Dilation(img9)
            elif method9 == "Boundary":
                result9 = c9.Boundary(img9)
            elif method9 == "Contour":
                result9 = c9.Contour(img9)
            elif method9 == "ConvexHull":
                result9 = c9.ConvexHull(img9)
            elif method9 == "DefectDetect":
                result9 = c9.DefectDetect(img9)
            elif method9 == "HoleFill":
                result9 = c9.HoleFill(img9)
            elif method9 == "ConnectedComponents":
                result9 = c9.ConnectedComponents(img9)
            else:  # RemoveSmallRice
                result9 = c9.RemoveSmallRice(img9)

            col1, col2 = st.columns(2)
            with col1:
                st.image(image9, caption="·∫¢nh g·ªëc", use_container_width=True)
            with col2:
                st.image(result9, caption=f"K·∫øt qu·∫£: {method9}", use_container_width=True)

elif menu == "M·ªü r·ªông th√™m (tu·ª≥ ch·ªçn)":
    st.subheader("üß™ Ph·∫ßn m·ªü r·ªông")
    st.write("üí° Demo th√™m: nh·∫≠n d·∫°ng ·∫£nh 3D, x·ª≠ l√Ω ·∫£nh n√¢ng cao...")